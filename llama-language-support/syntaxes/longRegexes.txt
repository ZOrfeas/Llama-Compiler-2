Follow(expr)
#(?=\\s*(
    # Keywords
    and|let|type|in|end|then|else|do|done|to|downto|with|dim|new|delete|begin|if|while|for|match|
    
    # Characters
    \\,|\\]|\\)|\\(|\\||
    
    # Unary operators
    (\\+|\\-|\\+\\.|\\-\\.|\\!|not)|
    
    # Binary operators
    (((\\+|\\-|\\*|\\/)(\\.)?)|mod|\\*\\*|\\=|\\<\\>|\\<|\\>|\\<\\=|\\>\\=|\\=\\=|\\!\\=|\\&\\&|\\|\\||\\;|\\:\\=)|
    
    # id
    ([a-z]([a-zA-Z0-9]|\\_)*)|
    
    # Id
    ([A-Z]([a-zA-Z0-9]|\\_)*)|
    
    # Consts
    (?<!\\.)[0-9]+(?=\\s+)|[0-9]+\\.[0-9]+(e[\\+\\-]?[0-9]+)?|
    \\'([^'\"\\\\\\n\\r\\0]|(\\\\([ntr0\\'\"]|(x{[0-9a-f]}{[0-9a-f]}))))\\'|
    \"((.|[^\"\\n])?)*\"|
    true|false|
    \\(\\)
))"

First(expr)
#(?=\\s*( 
    # Keywords
    dim|new|delete|let|begin|if|while|for|match| 

    # Characters
    \\( 
    
    # Unary operators
    (\\+|\\-|\\+\\.|\\-\\.|\\!|not)|

    # id
    ([a-z]([a-zA-Z0-9]|\\_)*)|
    
    # Id
    ([A-Z]([a-zA-Z0-9]|\\_)*)|

    # Consts
    (?<!\\.)[0-9]+(?=\\s+)|[0-9]+\\.[0-9]+(e[\\+\\-]?[0-9]+)?|
    \\'([^'\"\\\\\\n\\r\\0]|(\\\\([ntr0\\'\"]|(x{[0-9a-f]}{[0-9a-f]}))))\\'|
    \"((.|[^\"\\n])?)*\"|
    true|false|
    \\(\\)
))#



# If there was no function call allowed, then the First set wouldn't need to be included in the Follow set 
# Then Follow(expr) would be 
#(?=\\s*(
    # Keywords 
    and|in|let|type|end|then|else|do|done|to|downto|with
))



,
				{
					"comment": "expr binop expr",
					"begin": "(?=\\s*(dim|new|delete|let|begin|if|while|for|match|\\(|(\\+|\\-|\\+\\.|\\-\\.|\\!|not)|([a-z]([a-zA-Z0-9]|\\_)*)|([A-Z]([a-zA-Z0-9]|\\_)*)|(?<!\\.)[0-9]+(?=\\s+)|[0-9]+\\.[0-9]+(e[\\+\\-]?[0-9]+)?|\\'([^'\"\\\\\\n\\r\\0]|(\\\\([ntr0\\'\"]|(x{[0-9a-f]}{[0-9a-f]}))))\\'|\"((.|[^\"\\n])?)*\"|true|false|\\(\\)))",
					"end": "(?=\\s*(and|let|type|in[^t]|end|then|else|do|done|to|downto|with|true|false|dim|new|delete|begin|if|while|for|match|\\,|\\]|\\)|\\(|\\||(\\+|\\-|\\+\\.|\\-\\.|\\!|not)|(((\\+|\\-|\\*|\\/)(\\.)?)|mod|\\*\\*|\\=|\\<\\>|\\<|\\>|\\<\\=|\\>\\=|\\=\\=|\\!\\=|\\&\\&|\\|\\||\\;|\\:\\=)|([a-z]([a-zA-Z0-9]|\\_)*)|([A-Z]([a-zA-Z0-9]|\\_)*)|(?<!\\.)[0-9]+(?=\\s+)|[0-9]+\\.[0-9]+(e[\\+\\-]?[0-9]+)?|\\'([^'\"\\\\\\n\\r\\0]|(\\\\([ntr0\\'\"]|(x{[0-9a-f]}{[0-9a-f]}))))\\'|\"((.|[^\"\\n])?)*\"|true|false|\\(\\)))", 
					"contentName": "binop.expr",
					"patterns": [
						{
							"begin": "(?=\\s*(dim|new|delete|let|begin|if|while|for|match|\\(|(\\+|\\-|\\+\\.|\\-\\.|\\!|not)|([a-z]([a-zA-Z0-9]|\\_)*)|([A-Z]([a-zA-Z0-9]|\\_)*)|(?<!\\.)[0-9]+(?=\\s+)|[0-9]+\\.[0-9]+(e[\\+\\-]?[0-9]+)?|\\'([^'\"\\\\\\n\\r\\0]|(\\\\([ntr0\\'\"]|(x{[0-9a-f]}{[0-9a-f]}))))\\'|\"((.|[^\"\\n])?)*\"|true|false|\\(\\)))",
							"end": "(?=\\s*(((\\+|\\-|\\*|\\/)(\\.)?)|mod|\\*\\*|\\=|\\<\\>|\\<|\\>|\\<\\=|\\>\\=|\\=\\=|\\!\\=|\\&\\&|\\|\\||\\;|\\:\\=))", 
							"patterns": [{"include": "#expr"}]
						},
						{
							"include": "#binop"
						},
						{
							"begin": "(?<=(((\\+|\\-|\\*|\\/)(\\.)?)|mod|\\*\\*|\\=|\\<\\>|\\<|\\>|\\<\\=|\\>\\=|\\=\\=|\\!\\=|\\&\\&|\\|\\||\\;|\\:\\=)\\s*)",
							"end": "(?=\\s*(and|let|type|in[^t]|end|then|else|do|done|to|downto|with|true|false|dim|new|delete|begin|if|while|for|match|\\,|\\]|\\)|\\(|\\||(\\+|\\-|\\+\\.|\\-\\.|\\!|not)|(((\\+|\\-|\\*|\\/)(\\.)?)|mod|\\*\\*|\\=|\\<\\>|\\<|\\>|\\<\\=|\\>\\=|\\=\\=|\\!\\=|\\&\\&|\\|\\||\\;|\\:\\=)|([a-z]([a-zA-Z0-9]|\\_)*)|([A-Z]([a-zA-Z0-9]|\\_)*)|(?<!\\.)[0-9]+(?=\\s+)|[0-9]+\\.[0-9]+(e[\\+\\-]?[0-9]+)?|\\'([^'\"\\\\\\n\\r\\0]|(\\\\([ntr0\\'\"]|(x{[0-9a-f]}{[0-9a-f]}))))\\'|\"((.|[^\"\\n])?)*\"|true|false|\\(\\)))",
							"patterns": [{"include": "#expr"}]
						}
					]
				}