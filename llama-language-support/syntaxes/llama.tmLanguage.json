{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Llama",
	"patterns": 
	[
		{"include": "#program"},
		{"include": "#expr"}
	],
	"repository": {
		"testrule": 
		{
			"name": "testrule.llama",
			"begin": "start",
			"end": "(?<=rec([^a][^n][^d])*)",
			"patterns": [
				{
					"name": "keyword.control.rec.llama",
					"match": "rec"
				},
				{
					"begin": "(?<=rec\\s*)",
					"end": "(?=\\s*and)",
					"patterns": [{"include": "#idlowervar"}]
				}
			]
		},
		"comments": 
		{
			"patterns": [
				{
					"include": "#commentLine"
				},
				{
					"include": "#commentBlock"
				}
			]
		},
		"commentLine": 
		{
			"name": "comment.llama",
			"begin": "--",
			"end": "(?<=(--.*))$"
		},
		"commentBlock": 
		{
			"begin": "\\(\\*(?!\\*[^\\)])",
			"end": "\\*\\)",
			"name": "comment.llama",
			"contentName": "emphasis",
			"patterns": [{ "include": "#commentBlock" }]
		},
		"program": 
		{
			"patterns": 
			[
				{"include": "#comments"},
				{"include": "#letdef"},
				{"include": "#typedef"}
			]		
		},
		"letdef": 
		{
			"comment": "Lookahead with ?= so that we hopefully stop at next definition",
			"begin": "let", 
			"beginCaptures": { "0": { "name": "keyword.control.let.llama" } }, 
			"end": "(?=\\s*(let|type|in[^t]))",
			"contentName": "letdef.llama",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"comment": "First def, rec can only be here",
					"begin": "(?<=let\\s+)",
					"end": "(?=\\s*(let|type|in[^t]|and))",
					"contentName": "first.def.llama",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"comment": "If rec was found we are definitely here",
							"begin": "(?=rec)",
							"end": "(?=\\s*(let|type|in[^t]|and))",
							"name": "rec.found.llama",
							"patterns": [
								{
									"include": "#comments"
								},
								{
									"name": "keyword.control.rec.llama",
									"match": "rec"
								},
								{
									"include": "#defrec"
								}
							]
						},
						{
							"comment": "if rec wasn't found we are definitely here",
							"begin": "(?=[a-z])",
							"end": "(?=\\s*(let|type|in[^t]|and))",
							"patterns": [
								{
									"include": "#comments"
								},
								{
									"include": "#defnorec"
								}
							]
						}
					]
				},
				{
					"comment": "Continued letdef",
					"begin": "and",
					"beginCaptures": {"0": {"name": "letdef.and.llama"}},
					"end": "(?=\\s*(let|type|in[^t]|and))",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#defnorec" 
						}
					]
				}
			]
		},
		"typedef": 
		{
			"begin": "type",
			"beginCaptures": { "0": { "name": "keyword.control.type.llama" } },
			"end": "(?=\\s*(let|type))",
			"contentName": "typedef.llama",
			"patterns": [
				{
					"include": "#comments"
				},
				{	
					"include": "#tdef" 
				}
			]
		},
		"defrec": 
		{
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"begin": "mutable",
					"beginCaptures": { "0": { "name": "keyword.control.mutable.llama" } },
					"end": "(?=\\s*(and|let|type|in[^t])\\s*)",
					"contentName": "defrec.llama",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"begin": "(?=\\s*[a-z])",
							"end": "(?=\\s*(\\[|:|and|let|type|in[^t]))",
							"patterns": [
								{
									"include": "#comments"
								},
								{
									"include": "#idlowervar"
								}
							]
						},
						{
							"begin": "(?=\\s*\\[)",
							"end": "(?=\\s*(:|and|let|type|in[^t]))",
							"patterns": [
								{
									"include": "#comments"
								},
								{
									"name": "left.bracket.llama",
									"match": "\\["
								},
								{
									"name": "left.bracket.llama",
									"match": "\\["
								}, 
								{
									"include": "#expr"
								}
							]
						},
						{
							"begin": "(?=\\s*:)",
							"end": "(?=\\s*(and|let|type|in[^t]))",
							"patterns": [
								{
									"include": "#comments"
								},
								{
									"name": "colon.llama",
									"match": ":"
								},
								{
									"include": "#type"
								}
							]
						}
					]
				},
				{
					"begin": "(?<=rec\\s+)",
					"end": "(?=\\s*(and|let|type|in[^t]))",
					"contentName": "defrec.llama",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"begin": "(?<=rec\\s+)",
							"end": "(?=\\s*\\=)",
							"contentName": "leftside.llama",
							"patterns": [
								{
									"include": "#comments"
								},
								{
									"comment": "Ensure that this captures only the first id of each def",
									"begin": "(?<=rec\\s+)",
									"end": "[a-z][^\\s|:|=]*",
									"endCaptures": {"0": {"patterns": [{"include": "#idlowervar"}]}}
								},
								{
									"begin": "(?<=([a-zA-Z0-9]|_)\\s+)",
									"end": "(?=\\s*(:|\\=))",
									"patterns": [
										{
											"include": "#comments"
										},
										{
											"include": "#par"
										}
									]
								},
								{
									"begin": "(?=\\s*:)",
									"end": "(?=\\s*=)",
									"patterns": [
										{
											"include": "#comments"
										},
										{
											"name": "colon.llama",
											"match": ":"
										},
										{
											"include": "#type"
										}
									]
								}
							]
						},
						{
							"begin": "=(?=\\s*)",
							"beginCaptures": {"0": {"name": "equal.llama"}},
							"end": "(?=\\s*(and|let|type|in[^t]))",
							"contentName": "rightside.llama",
							"patterns": [
								{
									"include": "#comments"
								},
								{
									"include": "#expr"
								}
							]
						}
					]
				}
			]
		},
		"defnorec": 
		{
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"begin": "mutable",
					"beginCaptures": { "0": { "name": "keyword.control.mutable.llama" } },
					"end": "(?=\\s*(and|let|type|in[^t]))",
					"contentName": "defnorec.llama",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"begin": "(?=\\s*[a-z])",
							"end": "(?=\\s*(\\[|:|and|let|type|in[^t]))",
							"patterns": [
								{
									"include": "#comments"
								},
								{
									"include": "#idlowervar"
								}
							]
						},
						{
							"begin": "(?=\\s*\\[)",
							"end": "(?=\\s*(:|and|let|type|in[^t]))",
							"patterns": [
								{
									"include": "#comments"
								},
								{
									"name": "left.bracket.llama",
									"match": "\\["
								},
								{
									"name": "left.bracket.llama",
									"match": "\\["
								}, 
								{
									"include": "#expr"
								}
							]
						},
						{
							"begin": "(?=\\s*:)",
							"end": "(?=\\s*(and|let|type|in[^t]))",
							"contentName": "type.field",
							"patterns": [
								{
									"include": "#comments"
								},
								{
									"name": "colon.llama",
									"match": ":"
								},
								{
									"include": "#type"
								}
							]
						}
					]
				},
				{
					"begin": "(?<=(and|let)\\s+)",
					"end": "(?=\\s*(and|let|type|in[^t]))",
					"contentName": "defnorec.llama",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"begin": "(?<=(and|let)\\s+)",
							"end": "(?=\\s*\\=)",
							"contentName": "leftside.llama",
							"patterns": [
								{
									"include": "#comments"
								},
								{
									"comment": "Ensure that this captures only the first id of each def",
									"begin": "(?<=(and|let)\\s+)",
									"end": "[a-z][^\\s|:|=]*",
									"endCaptures": {"0": {"patterns": [{"include": "#idlowervar"}]}}
								},
								{
									"begin": "(?<=([a-zA-Z0-9]|_)\\s+)",
									"end": "(?=\\s*(:|\\=))",
									"patterns": [
										{
											"include": "#comments"
										},
										{
											"include": "#par"
										}
									]
								},
								{
									"begin": "(?=\\s*:)",
									"end": "(?=\\s*=)",
									"patterns": [
										{
											"include": "#comments"
										},
										{
											"name": "colon.llama",
											"match": ":"
										},
										{
											"include": "#type"
										}
									]
								}
							]
						},
						{
							"begin": "=(?=\\s*)",
							"beginCaptures": {"0": {"name": "equal.llama"}},
							"end": "(?=\\s*(and|let|type|in[^t]))",
							"contentName": "rightside.llama",
							"patterns": [
								{
									"include": "#comments"
								},
								{
									"include": "#expr"
								}
							]
						}
					]
				}
			]
		},
		"tdef":
		{
			"begin": "(?<=\\s*(type|and)\\s*)",
			"end": "(?=\\s*(let|type|and)\\s*)",
			"contentName": "tdef.llama",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"begin": "(?<=\\s*(type|and)\\s*)",
					"end": "=",
					"endCaptures": {"0": {"name": "tdef.equal.llama"}},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#idlowertype"
						}
					]
				},
				{
					"begin": "(?<=\\s*=\\s*)",
					"end": "(?=\\s*(let|type|and)\\s*)",
					"contentName": "tdef.constrlist.llama",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#constr"
						}
					]
				}
			]
		},
		"constr":
		{
			"comment": "Let's try this with chaining once",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"comment": "begin->FIRST(constr), end->of | FOLLOW(constr)",
					"begin": "(?=\\s*[A-Z])",
					"end": "(?=\\s*(of|\\||and|let|type))",
					"contentName": "constr.Id.llama",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#idupper"
						}
					]
				},
				{
					"comment": "begin->of, end->FOLLOW(constr)",
					"begin": "of",
					"beginCaptures": { "0": { "name": "keyword.control.constr.of.llama" } },
					"end": "(?=\\s*(\\||and|let|type))",
					"contentName": "constr.type.llama",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#type"
						}
					]
				}
			]
		},
		"par":
		{	
			"begin": "(?=\\(|[a-z])",
			"end": "(?=(\\s*(:|\\=))|(\\s+[a-z]))",
			"contentName": "par.llama",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"match": "[a-z]([a-zA-Z0-9]|_)*",
					"captures": {"0": {"name": "variable.parameter.llama"}}
				},
				{
					"begin": "\\(",
					"end": "\\)",
					"contentName": "inside.parens",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"begin": "(?<=\\(\\s*)",
							"end": ":",
							"endCaptures": {"0": {"name": "colon.llama"}},
							"patterns": [
								{
									"include": "#idlowerpar"
								}
							]
						},
						{
							"begin": "(?<=:)",
							"end": "(?=\\))",
							"patterns": [
								{
									"include": "#comments"
								},
								{
									"include": "#type"
								}
							]
						}
					]
				}
			]
		}, 
		"type": 
		{
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"name": "storage.type.llama",
					"match": "unit|int|char|bool|float"
				},
				{
					"include": "#idlowertype"
				},
				{
					"comment": "( type )",
					"begin": "\\(",
					"end": "\\)",
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				{
					"comment": "array [*,...*] of type",
					"name": "storage.type.llama",
					"begin": "(?=\\s*array\\s*[\\s*\\*(\\s*,\\s*\\*)*\\s*]\\s*of)",
					"end": "",
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				{
					"comment": "type -> type"
				},
				{
					"comment": "type ref (can be done properly with first follow, end cannot be just ref"
				}
			]
		},
		"expr": 
		{
			"patterns": [
				{"include": "#comments"},
				{"include": "#literal"},
				{
					"comment": "( expr )",
					"begin": "(?<=\\s*)\\((?=\\s*)",
					"end": "(?<=\\s*)\\)(?=\\s*)", 
					"patterns": [{"include": "#expr"}]
				},
				{"include": "#unop"},
				{"include": "#binop"},
				{
					"begin": "(?<=\\s*)dim",
					"end": "(?<=[a-z][[:word:]]*\\s*)",
					"beginCaptures": {"0": {"name": "keyword.control.dim"}},
					"patterns": [
						{"include": "#intLiteral"},
						{"include": "#idlowervar"}
					]
				},
				{
					"begin": "begin",
					"beginCaptures": {"0": {"name": "keyword.control.begin.llama"}},
					"end": "end",
					"endCaptures": {"0": {"name": "keyword.control.end.llama"}},
					"patterns": [{"include": "#expr"}] 
				},
				{
					"begin": "(?<=\\s*)while",
					"end": "(?<=\\s*)done",
					"beginCaptures": { "0": { "name": "keyword.control.while.llama" } },
					"endCaptures": { "0": { "name": "keyword.control.done.llama" } },
					"patterns": [
					  {
						"begin": "(?:(?<=(?:[^[:word:]]while|^while))(?![[:word:]]))",
						"end": "(?<=\\s*)do",
						"endCaptures": { "0": { "name": "keyword.control.do.llama" } },
						"patterns": [{ "include": "#expr" }]
					  },
					  {
						"begin": "(?:(?<=(?:[^[:word:]]do|^do))(?![[:word:]]))",
						"end": "(?=\\s*done)",
						"patterns": [{ "include": "#expr" }]
					  }
					]
				},
				{
					"begin": "(?<=\\s*)for",
					"end": "(?<=\\s*)done",
					"beginCaptures": {"0": {"name": "keyword.control.for.llama"}},
					"endCaptures": {"0": {"name": "keyword.control.done.llama"}},
					"patterns": [
						{
							"begin": "(?<=for\\s*)",
							"end": "(?<=\\s*)=",
							"endCaptures": {"0": {"name": "equal.llama"}},
							"patterns": [{"include": "#idlowervar"}]
						},
						{
							"begin": "(?<==\\s*)",
							"end": "(?<=\\s*)(to|downto)",
							"endCaptures": {"0": {"name": "keyword.control.to.llama"}},
							"patterns": [{"include": "#expr"}]
						},
						{
							"begin": "(?<=(to|downto)\\s*)",
							"end": "(?<=\\s*)do",
							"endCaptures": {"0": {"name": "keyword.control.do.llama"}},
							"patterns": [{"include": "#expr"}]
						},
						{
							"begin": "(?<=do\\s*)",
							"end": "(?=\\s*done)",
							"patterns": [{"include": "#expr"}]
						}
					]

				},
				{
					"begin": "(?<=\\s*)match",
					"end": "(?<=\\s*)end",
					"beginCaptures": {"0": {"name": "keyword.control.match.llama"}},
					"endCaptures": {"0": {"name": "keyword.control.end.llama"}},
					"patterns": [
						{
							"begin": "(?<=match\\s*)",
							"end": "(?<=\\s*)with",
							"endCaptures": {"0": {"name": "keyword.control.with.llama"}},
							"patterns": [{"include": "#expr"}]
						},
						{
							"begin": "(?<=with\\s*)",
							"end": "(?=\\s*end)",
							"patterns": [
								{"include": "#clause"},
								{
									"name": "bar.llama",
									"match": "\\|"
								}
							]
						}
					]
				},
				{
					"name": "keyword.operator.llama",
					"match": "(new|delete)"
				},
				{"include": "#type"},
				{"include": "#idlowervar"},
				{"include": "#idupper"}
			]
		},
		"idlowervar": 
		{
			"patterns": [
				{
					"name": "variable.other.llama",
					"match": "[a-z]([A-Za-z]|[0-9]|_)*"
				}
			]
		},
		"idlowerpar": 
		{
			"patterns": [
				{
					"name": "variable.parameter.llama",
					"match": "[a-z]([A-Za-z]|[0-9]|_)*"
				}
			]
		},
		"idlowertype":
		{
			"patterns": [
				{
					"name": "entity.name.type.llama",
					"match": "[a-z]([A-Za-z]|[0-9]|_)*"
				}
			]
		},
		"idupper":
		{
			"patterns": [
				{"match": "[A-Z]([A-Za-z]|[0-9]|_)*"}
			]
		},
		"binop": 
		{
			"patterns": [{"match": "((\\+|\\-|\\*|\\/)(\\.)?)|mod|\\*\\*|\\=|\\<\\>|\\<|\\>|\\<\\=|\\>\\=|\\=\\=|\\!\\=|\\&\\&|\\|\\||\\;|\\:\\="}]
		},
		"unop": 
		{
			"patterns": [{"name": "unop.llama", "match": "\\+|\\-|\\+\\.|\\-\\.|\\!|not"}]
		},
		"literal": 
		{
			"patterns": [
				{"include": "#intLiteral"},
				{"include": "#floatLiteral"},
				{"include": "#charLiteral"},
				{"include": "#stringLiteral"},
				{"include": "#boolLiteral"},
				{"include": "#unitLiteral"}
			]
		},
		"intLiteral":
		{
			"patterns": [
				{
					"name": "constant.numeric.int.llama",
					"match": "(?<!\\.)[0-9]+(?=\\s+)"
				}
			]
		},
		"floatLiteral": 
		{
			"patterns": [
				{
					"name": "constant.numeric.float.llama",
					"match": "[0-9]+\\.[0-9]+(e[\\+\\-]?[0-9]+)?"
				}
			]
		}, 
		"charLiteral": 
		{
			"patterns": [
				{
					"name": "string.quoted.single.llama",
					"match": "\\'([^'\"\\\\\\n\\r\\0]|(\\\\([ntr0\\'\"]|(x{[0-9a-f]}{[0-9a-f]}))))\\'"
				}
			]
		},
		"stringLiteral": 
		{
			"patterns": [
				{
					"name": "string.quoted.double.llama",
					"match": "\"((.|[^\"\\n])?)*\""
				}
			]
		},
		"boolLiteral": 
		{
			"patterns": [
				{
					"name": "constant.language.bool.llama", 
					"match": "true|false"
				}
			]
		}, 
		"unitLiteral": 
		{
			"patterns": [
				{
					"name": "constant.language.unit.llama", 
					"match": "\\(\\)"
				}
			]
		},
		"clause": 
		{
			"comment": "Only appears in match rule",
			"begin": "(?<=(with|\\|)\\s*)",
			"end": "(?=\\s*(end|\\|))",
			"contentName": "clause.llama",
			"patterns": [
				{
					"begin": "(?<=(with|\\|)\\s*)",
					"end": "(?<=\\s*)\\-\\>",
					"endCaptures": {"0": {"name": "arrow.llama"}},
					"patterns": [{"include": "#pattern"}] 
				},
				{
					"begin": "(?<=\\-\\>\\s*)",
					"end": "(?=\\s*(end|\\|))",
					"patterns": [{"include": "#expr"}]
				}
			]

		},
		"pattern": 
		{
			"patterns": [
				{
					"name": "pattern.unop.llama",
					"match": "(\\+\\.|\\-\\.)(?=\\s*[0-9]+\\.[0-9]+(e[\\+\\-]?[0-9]+)?)|(\\+|\\-)(?=\\s*(?<!\\.)[0-9]+(?=\\s+))"
				},
				{"include": "#intLiteral"},
				{"include": "#floatLiteral"},
				{"include": "#charLiteral"}, 
				{"include": "#boolLiteral"},
				{"include": "#idlowervar"},
				{
					"begin": "(?<=\\s*)\\(",
					"end": "(?<=\\s*)\\)",
					"patterns": [{"include": "#pattern"}]
				},
				{
					"comment": "Constructor pattern"
				}
			]
		}
	},
	"scopeName": "source.lla"
}