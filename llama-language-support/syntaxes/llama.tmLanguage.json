{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Llama",
	"patterns": 
	[
		{"include": "#program"},
		{"include": "#testrule"},
		{"include": "#strings"}
	],
	"repository": {
		"testrule": 
		{
			"name": "testrule.llama",
			"begin": "start",
			"end": "(?<=rec([^a][^n][^d])*)",
			"patterns": [
				{
					"name": "keyword.control.rec.llama",
					"match": "rec"
				},
				{
					"begin": "(?<=rec\\s*)",
					"end": "(?=\\s*and)",
					"patterns": [{"include": "#idlowervar"}]
				}
			]
		},
		"program": 
		{
			"patterns": 
			[
				{"include": "#letdef"},
				{"include": "#typedef"}
			]		
		},
		"letdef": 
		{
			"patterns": [
				{
					"comment": "Lookahead with ?= so that we hopefully stop at next definition",
					"begin": "let", 
					"beginCaptures": { "0": { "name": "keyword.control.let.llama" } }, 
					"end": "(?=\\s*(let|type|in))",
					"contentName": "letdef.llama",
					"patterns": [
						{
							"comment": "First def, rec can only be here",
							"begin": "(?<=let\\s+)",
							"end": "(?=\\s*(let|type|in|and))",
							"contentName": "first.def.llama",
							"patterns": [
								{
									"comment": "If rec was found we are definitely here",
									"begin": "(?=rec)",
									"end": "(?=\\s*(let|type|in|and))",
									"name": "rec.found.llama",
									"patterns": [
										{
											"name": "keyword.control.rec.llama",
											"match": "rec"
										},
										{
											"include": "#defrec"
										}
									]
								},
								{
									"comment": "if rec wasn't found we are definitely here",
									"begin": "(?=[a-z])",
									"end": "(?=\\s*(let|type|in|and))",
									"patterns": [
										{
											"include": "#defnorec"
										}
									]
								}
							]
						},
						{
							"comment": "Continued letdef",
							"begin": "and",
							"beginCaptures": {"0": {"name": "letdef.and.llama"}},
							"end": "(?=\\s*(let|type|in|and))",
							"patterns": [
								{
									"include": "#defnorec" 
								}
							]
						}
					]
				}
			]
		},
		"typedef": 
		{
			"patterns": [
				{
					"begin": "\\s*type\\s*",
					"beginCaptures": { "0": { "name": "keyword.control.type.llama" } },
					"end": "(?=\\s*(let|type)\\s*)",
					"contentName": "typedef.llama",
					"patterns": [
						{	
							"include": "#tdef" 
						}
					]
				}
			]
		},
		"defrec": 
		{
			"patterns": [
				{
					"begin": "mutable",
					"beginCaptures": { "0": { "name": "keyword.control.mutable.llama" } },
					"end": "(?=\\s*(and|let|type|in)\\s*)",
					"contentName": "def.llama",
					"patterns": [
						{
							"begin": "(?=\\s*[a-z])",
							"end": "(?=\\s*(:|and|let|type|in))",
							"patterns": [
								{
									"include": "#idlowervar"
								},
								{
									"include": "#expr"
								}
							]
						},
						{
							"begin": ":",
							"beginCaptures": {"0": {"name": "colon.llama"}},
							"end": "(?=\\s*(and|let|type|in)\\s*)",
							"patterns": [
								{
									"include": "#type"
								}
							]
						}
					]
				},
				{
					"begin": "(?<=rec\\s+)",
					"end": "(?=\\s*(and|let|type|in))",
					"contentName": "defrec.llama",
					"patterns": [
						{
							"begin": "(?<=rec\\s+)",
							"end": "(?=\\s*\\=)",
							"contentName": "leftside.llama",
							"patterns": [
								{
									"comment": "Ensure that this captures only the first id of each def",
									"begin": "(?<=rec\\s+)",
									"end": "[a-z][^\\s|:|=]*",
									"endCaptures": {"0": {"patterns": [{"include": "#idlowervar"}]}}
								},
								{
									"begin": "(?<=([a-zA-Z0-9]|_)\\s+)",
									"end": "(?=\\s*(:|\\=))",
									"patterns": [
										{
											"include": "#par"
										}
									]
								},
								{
									"begin": "(?=\\s*:)",
									"end": "(?=\\s*=)",
									"patterns": [
										{
											"name": "colon.llama",
											"match": ":"
										},
										{
											"include": "#type"
										}
									]
								}
							]
						},
						{
							"begin": "(?=\\s*)=",
							"beginCaptures": {"0": {"name": "equal.llama"}},
							"end": "(?=\\s*(and|let|type|in))",
							"contentName": "rightside.llama",
							"patterns": [
								
							]
						}
					]
				}
			]
		},
		"defnorec": 
		{
			"patterns": [
				{
					"begin": "mutable",
					"beginCaptures": { "0": { "name": "keyword.control.mutable.llama" } },
					"end": "(?=\\s*(and|let|type|in)\\s*)",
					"contentName": "def.llama",
					"patterns": [
						{
							"begin": "(?=\\s*[a-z])",
							"end": "(?=\\s*(:|and|let|type|in))",
							"patterns": [
								{
									"include": "#idlowervar"
								},
								{
									"include": "#expr"
								}
							]
						},
						{
							"begin": ":",
							"beginCaptures": {"0": {"name": "colon.llama"}},
							"end": "(?=\\s*(and|let|type|in)\\s*)",
							"patterns": [
								{
									"include": "#type"
								}
							]
						}
					]
				},
				{
					"begin": "(?<=(and|let)\\s+)",
					"end": "(?=\\s*(and|let|type|in))",
					"contentName": "defnorec.llama",
					"patterns": [
						{
							"begin": "(?<=(and|let)\\s+)",
							"end": "(?=\\s*\\=)",
							"contentName": "leftside.llama",
							"patterns": [
								{
									"comment": "Ensure that this captures only the first id of each def",
									"begin": "(?<=(and|let)\\s+)",
									"end": "[a-z][^\\s|:|=]*",
									"endCaptures": {"0": {"patterns": [{"include": "#idlowervar"}]}}
								},
								{
									"begin": "(?<=([a-zA-Z0-9]|_)\\s+)",
									"end": "(?=\\s*(:|\\=))",
									"patterns": [
										{
											"include": "#par"
										}
									]
								},
								{
									"begin": "(?=\\s*:)",
									"end": "(?=\\s*=)",
									"patterns": [
										{
											"name": "colon.llama",
											"match": ":"
										},
										{
											"include": "#type"
										}
									]
								}
							]
						},
						{
							"begin": "(?=\\s*)=",
							"beginCaptures": {"0": {"name": "equal.llama"}},
							"end": "(?=\\s*(and|let|type|in))",
							"contentName": "rightside.llama",
							"patterns": [
								
							]
						}
					]
				}
			]
		},
		"tdef":
		{
			"patterns": [
				{
					"begin": "(?<=\\s*(type|and)\\s*)",
					"end": "(?=\\s*(let|type|and)\\s*)",
					"contentName": "tdef.llama",
					"patterns": [
						{
							"begin": "(?<=\\s*(type|and)\\s*)",
							"end": "=",
							"endCaptures": {"0": {"name": "tdef.equal.llama"}},
							"patterns": [
								{
									"include": "#idlowertype"
								}
							]
						},
						{
							"begin": "(?<=\\s*=\\s*)",
							"end": "(?=\\s*(let|type|and)\\s*)",
							"contentName": "tdef.constrlist.llama",
							"patterns": [
								{
									"include": "#constr"
								}
							]
						}
					]
				}
			]
		},
		"constr":
		{
			"comment": "Let's try this with chaining once",
			"patterns": [
				{
					"comment": "begin->FIRST(constr), end->of | FOLLOW(constr)",
					"begin": "(?=\\s*[A-Z])",
					"end": "(?=\\s*(of|\\||and|let|type))",
					"contentName": "constr.Id.llama",
					"patterns": [
						{
							"include": "#idupper"
						}
					]
				},
				{
					"comment": "begin->of, end->FOLLOW(constr)",
					"begin": "of",
					"beginCaptures": { "0": { "name": "keyword.control.constr.of.llama" } },
					"end": "(?=\\s*(\\||and|let|type))",
					"contentName": "constr.type.llama",
					"patterns": [
						{
							"include": "#type"
						}
					]
				}
			]
		},
		"par":
		{	
			"begin": "(?=\\(|[a-z])",
			"end": "(?=(\\s*(:|\\=))|(\\s+[a-z]))",
			"contentName": "par.llama",
			"patterns": [
				{
					"match": "[a-z]([a-zA-Z0-9]|_)*",
					"captures": {"0": {"name": "variable.parameter.llama"}}
				},
				{
					"begin": "\\(",
					"end": "\\)",
					"contentName": "inside.parens",
					"patterns": [
						{
							"begin": "(?<=\\(\\s*)",
							"end": ":",
							"endCaptures": {"0": {"name": "colon.llama"}},
							"patterns": [
								{
									"include": "#idlowerpar"
								}
							]
						},
						{
							"begin": "(?<=:)",
							"end": "(?=\\))",
							"patterns": [
								{
									"include": "#type"
								}
							]
						}
					]
				}
			]
		}, 
		"type": 
		{
			"patterns": [
				{
					"name": "storage.type.llama",
					"match": "(unit|int|char|bool|float)"
				},
				{
					"include": "#idlowertype"
				},
				{
					"comment": "( type )",
					"begin": "\\(",
					"end": "\\)",
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				{
					"comment": "array [*,...*] of type",
					"name": "storage.type.llama",
					"begin": "\\s*array\\s*[\\s*\\*(\\s*,\\s*\\*)*\\s*]\\s*of\\s*",
					"end": "",
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				{
					"comment": "type -> type"
				},
				{
					"comment": "type ref",
					"match": "[^.]"
				}
			]
		},
		"idlowervar": 
		{
			"patterns": [
				{
					"name": "variable.other.llama",
					"match": "[a-z]([A-Za-z]|[0-9]|_)*"
				}
			]
		},
		"idlowerpar": 
		{
			"patterns": [
				{
					"name": "variable.parameter.llama",
					"match": "[a-z]([A-Za-z]|[0-9]|_)*"
				}
			]
		},
		"idlowertype":
		{
			"patterns": [
				{
					"name": "entity.name.type.llama",
					"match": "[a-z]([A-Za-z]|[0-9]|_)*"
				}
			]
		},
		"idupper":
		{
			"patterns": [
				{"match": "[A-Z]([A-Za-z]|[0-9]|_)*"}
			]
		},
		"operators": 
		{
			"patterns": [
				{"include": "#binops"},
				{"include": "#unops"}
			]
		},
		"binops": 
		{
			"patterns": [
				{"match": "=\\|+\\-\\*/;<>"},
				{"match": "->"},
				{"match": "+."},
				{"match": "-."},
				{"match": "*."},
				{"match": "/."},
				{"match": "**"},
				{"match": "&&"},
				{"match": "||"},
				{"match": "<>"},
				{"match": "<="},
				{"match": ">="},
				{"match": "=="},
				{"match": "!="},
				{"match": ":="},
				{"match": "mod"}
			]
		},
		"unops": 
		{
			"patterns": [
				{"match": "!"},
				{"match": "new"}, 
				{"match": "delete"}
			]
		},
		"strings": 
		{
			"name": "string.quoted.double.llama",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.llama",
					"match": "\\."
				}
			]
		}
	},
	"scopeName": "source.lla"
}